{{- $db := mergeOverwrite .Values.db ( .Values.db.operator_install | default dict ) -}}
{{- $clusterName := include "clusterName" $ -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-web
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels" . | nindent 4 }}
    app.kubernetes.io/component: web
spec:
  replicas: {{ .Values.replicas.web }}
  selector:
    matchLabels:
      {{- include "selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: web
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: web
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yml") . | sha256sum }}
    spec:
      {{- with .Values.affinity.web }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        fsGroup: 33
      initContainers:
      {{- /* no migrations if standby mode */}}
      {{- if not $db.bootstrap.standby }}
      - name: migrations
        {{- include "etripImage" . | nindent 8 }}
        command: [ "/var/www/localhost/migrate" ]
        volumeMounts:
        - mountPath: /config
          name: config
          subPath: etrip
        - mountPath: /tmp/elogger
          name: elogger
        - mountPath: /secrets
          name: secrets
          readOnly: true
        env:
        - name: ETRIP_CONFIG
          value: /config
        - name: ETRIP_DSN
          value: >-
            user=etrip
            host={{ .Release.Name }}-db-rw
            sslcert=/secrets/app-tls/postgresql.crt
            sslkey=/secrets/app-tls/postgresql.key
            sslrootcert=/secrets/app-tls/root.crt
        resources:
          {{- toYaml .Values.resources.migrate | nindent 10 }}
      {{- end }}
      {{- if .Values.frontends.enabled }}
      - name: copy-frontends
        {{- include "frontendsImage" . | nindent 8 }}
        volumeMounts:
        - mountPath: /dest
          name: frontends
        command:
          - /bin/sh
          - -c
          - cp -r /frontends/* /dest/
      {{- end}}
      containers:
      - name: etrip
        command: [ "supervisord", "-n", "-c", "/config/supervisor.conf" ]
        {{- include "etripImage" . | nindent 8 }}
        livenessProbe:
          httpGet:
            path: /ping
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        volumeMounts:
        - mountPath: /config
          name: config
          subPath: etrip
        - mountPath: /tmp/elogger
          name: elogger
        {{- if .Values.frontends.enabled}}
        - mountPath: /frontends
          name: frontends
        {{- end}}
        - mountPath: /secrets
          name: secrets
          readOnly: true
        env:
        - name: ETRIP_CONFIG
          value: /config
        - name: ETRIP_DSN
          value: >-
            user=etrip
            host={{ .Release.Name }}-db-rw
            sslcert=/secrets/app-tls/postgresql.crt
            sslkey=/secrets/app-tls/postgresql.key
            sslrootcert=/secrets/app-tls/root.crt
        - name: ETRIP_DSN_RO
          value: >-
            user=etrip
            host={{ .Release.Name }}-db-r
            sslcert=/secrets/app-tls/postgresql.crt
            sslkey=/secrets/app-tls/postgresql.key
            sslrootcert=/secrets/app-tls/root.crt
        {{- if or .Values.etrip.use_redis .Values.etripng.enabled }}
        - name: REDIS_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: session
        - name: REDIS_URL
          value: redis://user:$(REDIS_SECRET)@{{ .Release.Name }}-redis:6379/
        {{- end }}
        {{- with .Values.etrip.searchlogs -}}{{- if .enabled }}
        {{- if not .certificate }}
        - name: SEARCHLOGS_DBPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .passwordSecret | default (printf "%s.%s.credentials" .username .host) }}
              key: password
        {{- end }}
        - name: ETRIP_SEARCHLOGS_DSN
          value: >-
            user={{ .username }}
            dbname={{ .dbname }}
            host={{ .host }}
            {{- if not .certificate }}
            password=$(SEARCHLOGS_DBPASSWORD)
            {{- else }}
            sslcert=/secrets/searchlogs-tls/postgresql.crt
            sslkey=/secrets/searchlogs-tls/postgresql.key
            sslrootcert=/secrets/searchlogs-tls/root.crt
            {{- end }}
        - name: ETRIP_SEARCHLOGS_TABLE
          value: {{ .table | default ($.Release.Name
            | trimPrefix (print $.Chart.Name "-"))
            | replace "-" "_" }}
        {{- end }}{{- end }}
        - name: ETRIP_LOGDIR
          value: /tmp/elogger
        - name: ETRIP_VERSION
          value: {{ .Values.version | quote }}
        {{- if .Values.smtpgate.enabled }}
        - name: ETRIP_SMTP_HOST
          value: localhost
        {{- end }}
        ports:
        - containerPort: 8080
          name: etrip
          protocol: TCP
        {{- $port := 5000 }}
        {{- range $key, $instance := .Values.b2b }}
        - containerPort: {{ $port }}{{ $port = add $port 1 }}
          name: b2b-server-{{ $key }}
          protocol: TCP
        {{- end }}
        resources:
          {{- toYaml .Values.resources.fpm | nindent 10 }}
      {{- $port := 6000 }}
      {{- range $b2bidx, $b2b := .Values.b2b }}
      - name: b2b-{{ $b2bidx }}
        {{- with $image := merge $b2b.image $.Values.b2b_defaults.image }}
        image: {{ $image.registry -}} / {{- $image.name -}} : 
          {{- $image.tag | default $.Values.version | default $.Chart.AppVersion | toString }}
        imagePullPolicy: {{ .pullPolicy }}
        {{- end }}
        env:
        - name: NGINX_PORT
          value: {{ $port | quote }}
        - name: TARGET_FPM
          value: localhost:{{ $b2b.fpm.port }}
        ports:
        - containerPort: {{ $port }}{{ $port = add $port 1}}
          name: b2b-{{ $b2bidx }}
          protocol: TCP
      {{- end }}
      {{- if .Values.frontends.enabled }}
      - name: frontends
        image: nginx:stable-alpine
        volumeMounts:
        - mountPath: /config
          name: config
          subPath: frontends
        - mountPath: /frontends
          name: frontends
        ports:
        {{- range $idx, $key := .Values.frontends.endpoints }}
        - containerPort: {{ add 8082 $idx }}
          name: frontend-{{ $key }}
          protocol: TCP
        {{- end }}
        command: [ nginx, -c, /config/nginx.conf ]
      {{- end }}
      {{- with .Values.elogger }}
      {{- if .enabled }}
      - name: sendlogs
        # run as non-root
        securityContext:
          runAsUser: 33
          runAsGroup: 33
        image: {{ .image.registry -}} / {{- .image.name -}} : {{- .image.tag | toString }}
        imagePullPolicy: {{ .image.pullPolicy }}
        env:
        - name: ELOGGER_DIR
          value: /tmp/elogger
        {{- if not .db.certificate }}
        - name: ELOGGER_DBPASS
          valueFrom:
            secretKeyRef: 
              name: {{ .db.passwordSecret | default (printf "%s.%s.credentials" .db.username .db.host) }}
              key: {{ .db.passwordKey | default "password" }}
        {{- end }}
        - name: ELOGGER_DSN
          value: >-
            user={{ .db.username }}
            host={{ .db.host }}
            dbname={{ .db.dbname }}
            {{- if not .db.certificate }}
            password=$(ELOGGER_DBPASS)
            {{- end }}
        - name: ELOGGER_TABLE
          value: {{ .table | default ($.Release.Name
            | trimPrefix (print $.Chart.Name "-")) 
            | replace "-" "_" }}
        - name: ELOGGER_INGRESS
          value: "false"
        volumeMounts:
        - mountPath: /tmp/elogger
          name: elogger
        {{- if .db.certificate }}
        - mountPath: /app/.postgresql
          name: secrets
          subPath: elogger-tls
          readOnly: true
        {{- end }}
      {{- end }}{{ end }}
      {{- if .Values.smtpgate.enabled }}
      - name: smtp
        image: boky/postfix:{{ .Values.smtpgate.imageVersion }}
        {{- if .Values.smtpgate.always_bcc }}
        command:
          - sh
          - -c 
          - |
            postconf -e always_bcc={{ .Values.smtpgate.always_bcc }}
            /run.sh
        {{- end }}
        env:
        - name: HOSTNAME
          value: {{ .Values.smtpgate.hostname | default "smtp-gate" }}
        - name: ALLOWED_SENDER_DOMAINS
          value: {{ .Values.smtpgate.domains }}
        {{- with .Values.smtpgate.relayhost }}
        - name: RELAYHOST
          value: {{ . }}
        {{- end }}
        {{- if .Values.smtpgate.user }}
        - name: RELAYHOST_USERNAME
          value: {{ .Values.smtpgate.user }}
        - name: RELAYHOST_PASSWORD
          value: {{ .Values.smtpgate.password | quote }}
        {{- end }}
        ports:
        - containerPort: 25
          name: smtp
          protocol: TCP
        resources:
          {{- toYaml .Values.resources.smtp | nindent 10 }}
      {{- end }}

      {{- if .Values.etrip.monitoring.enabled }}
      {{- $monitorScrapeUri := "" }}
      {{- range $val := .Values.etrip.fpm }}
        {{- if not $val.disabled }}
          {{- $monitorScrapeUri = printf "%s,tcp://127.0.0.1:%d/status" $monitorScrapeUri (add 500 $val.port)  }}
        {{- end }}
      {{- end }}
      {{- range $key, $instance := .Values.b2b }}
        {{- $val := mergeOverwrite (deepCopy $.Values.b2b_defaults.fpm) $instance.fpm }}
        {{- if not $val.disabled }}
          {{- $monitorScrapeUri = printf "%s,tcp://127.0.0.1:%d/status" $monitorScrapeUri (add 500 $val.port)  }}
        {{- end }}
      {{- end }}
      {{- $monitorScrapeUri = trimPrefix "," $monitorScrapeUri }}
      - name: fpm-exporter
        image: {{ .Values.etrip.monitoring.image.registry -}} / {{- .Values.etrip.monitoring.image.name -}} : {{- .Values.etrip.monitoring.image.tag | toString }}
        ports:
        - containerPort: 9253
          name: metrics
          protocol: TCP
        env:
        - name: PHP_FPM_SCRAPE_URI
          value: {{ $monitorScrapeUri }}
        - name: PHP_FPM_FIX_PROCESS_COUNT
          value: "true"
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-config
          items:
          - key: etrip.json
            path: etrip/config.json
          - key: etrip-nginx.conf
            path: etrip/nginx.conf
          - key: supervisor.conf
            path: etrip/supervisor.conf
          {{- if ne (len .Values.etrip.passwords) 0 }}
          - key: htpasswd
            path: etrip/htpasswd
          {{- end }}
          - key: etrip-fpm.ini
            path: etrip/fpm.ini
          {{- if .Values.frontends.enabled }}
          - key: frontends-nginx.conf
            path: frontends/nginx.conf
          {{- end }}
          {{ range $b2bkey, $b2b := .Values.b2b}}
          - key: b2b-{{$b2bkey}}.json
            path: etrip/b2b-{{$b2bkey}}.json
          {{ end }}
      - name: secrets
        projected:
          sources:
          - secret:
              name: {{ .Release.Name }}-db-app-tls
              items:
              - key: tls.crt
                path: app-tls/postgresql.crt
              - key: tls.key
                path: app-tls/postgresql.key
                mode: 416
              - key: ca.crt
                path: app-tls/root.crt
          {{- with .Values.etrip.searchlogs }}
          {{- if and .enabled .certificate }}
          - secret:
              name: {{ .certificate }}
              items:
              - key: tls.crt
                path: searchlogs-tls/postgresql.crt
              - key: tls.key
                path: searchlogs-tls/postgresql.key
                mode: 416
              - key: ca.crt
                path: searchlogs-tls/root.crt
          {{- end }}{{ end}}
          {{- with .Values.elogger }}
          {{- if and .enabled .db.certificate }}
          - secret:
              name: {{ .db.certificate }}
              items:
              - key: tls.crt
                path: elogger-tls/postgresql.crt
              - key: tls.key
                path: elogger-tls/postgresql.key
                mode: 384
              - key: ca.crt
                path: elogger-tls/root.crt
          {{- end }}{{ end }}
      - name: elogger
        emptyDir: {}
      {{- if .Values.frontends.enabled}}
      - name: frontends
        emptyDir: {}
      {{- end}}
