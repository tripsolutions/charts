{{- define "etripCronjob" }}
{{- $db := mergeOverwrite .global.Values.db ( .global.Values.db.operator_install | default dict ) -}}
{{- $clusterName := include "clusterName" .global -}}
{{- $createSecretsVolume := false }}
{{- $createSecretsVolume = or $createSecretsVolume (eq $db.provider "cnpg") }}
{{- $createSecretsVolume = or $createSecretsVolume (
      and .global.Values.etrip.searchlogs.enabled 
      .global.Values.etrip.searchlogs.certificate ) }}
{{- $createSecretsVolumeMount := $createSecretsVolume }}
{{- $createSecretsVolume = or $createSecretsVolume (
      and .global.Values.elogger.enabled
      .global.Values.elogger.db.certificate ) }}
kind: CronJob
apiVersion: batch/v1
metadata:
  name: {{ .global.Release.Name }}-cron-{{ .cron.name  }}
  namespace: {{ .global.Release.Namespace }}
  labels:
    {{- include "labels" .global | nindent 4 }}
spec:
  schedule: {{ .cron.schedule | quote }}
  successfulJobsHistoryLimit: {{ .cron.doneHistory | default 3 }}
  failedJobsHistoryLimit: {{ .cron.failedHistory | default 1 }}
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        cronjob-name: {{ .cron.name }}
        {{- include "selectorLabels" .global | nindent 8 }}
    spec:
      template:
        metadata:
          labels:
            cronjob-name: {{ .cron.name }}
            {{- include "selectorLabels" .global | nindent 12 }}
        spec:
          restartPolicy: Never
          securityContext:
            fsGroup: 33
          containers:
          - name: job
            {{- include "etripImage" .global | nindent 12 }}
            volumeMounts:
            - mountPath: /config
              name: config
              subPath: etrip
            - mountPath: /tmp/elogger
              name: elogger
            {{- if $createSecretsVolumeMount }}
            - mountPath: /secrets
              name: secrets
              readOnly: true
            {{- end }}
            env:
            - name: ETRIP_CONFIG
              value: /config
            {{- if eq $db.provider "zalando" }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef: 
                  name: etrip. {{- $clusterName -}} .credentials
                  key: password
            - name: ETRIP_DSN
              value: >-
                user=etrip
                password=$(DB_PASSWORD)
                host={{ $clusterName }}
            {{- if gt (int .global.Values.replicas.db) 1 }}
            - name: ETRIP_DSN_RO
              value: >-
                user=etrip
                password=$(DB_PASSWORD)
                host={{ $clusterName }}-repl
                connect_timeout=1
            {{- end }}
            {{- else if eq $db.provider "cnpg" }}
            - name: ETRIP_DSN
              value: >-
                user=etrip
                host={{ .global.Release.Name }}-db-rw
                sslcert=/secrets/app-tls/postgresql.crt
                sslkey=/secrets/app-tls/postgresql.key
                sslrootcert=/secrets/app-tls/root.crt
            - name: ETRIP_DSN_RO
              value: >-
                user=etrip
                host={{ .global.Release.Name }}-db-r
                sslcert=/secrets/app-tls/postgresql.crt
                sslkey=/secrets/app-tls/postgresql.key
                sslrootcert=/secrets/app-tls/root.crt
            {{- end }}
            {{- with .global.Values.etrip.searchlogs -}}{{- if .enabled }}
            {{- if not .certificate }}
            - name: SEARCHLOGS_DBPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s.%s.credentials" .username .host | default .passwordSecret }}
                  key: password
            {{- end }}
            - name: ETRIP_SEARCHLOGS_DSN
              value: >-
                user={{ .username }}
                dbname={{ .dbname }}
                host={{ .host }}
                {{- if not .certificate }}
                password=$(SEARCHLOGS_DBPASSWORD)
                {{- else }}
                sslcert=/secrets/searchlogs-tls/postgresql.crt
                sslkey=/secrets/searchlogs-tls/postgresql.key
                sslrootcert=/secrets/searchlogs-tls/root.crt
                {{- end }}
            - name: ETRIP_SEARCHLOGS_TABLE
              value: {{ .table | default ($.global.Release.Name
                | trimPrefix (print $.global.Chart.Name "-")) 
                | replace "-" "_" }}
            {{- end }}{{- end }}
            {{- if .cron.env }}
            {{- range .cron.env }}
            - name: {{ .key }}
              value: {{ .value }}
            {{- end }}
            {{- end }}
            - name: ETRIP_LOGDIR
              value: /tmp/elogger
            {{- if .global.Values.smtpgate.enabled }}
            - name: ETRIP_SMTP_HOST
              value: {{ .global.Release.Name }}-service
            {{- end }}
            {{- with .cron.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            command: 
              - /bin/sh
              - -c
              - |
                {{- .cron.command | toString | nindent 16 }}
                touch /tmp/elogger/elogger.done
          {{- if and .global.Values.elogger.enabled (not .cron.nologs ) }}
          {{- with .global.Values.elogger }}
          - name: sendlogs
            # run as non-root
            securityContext:
              runAsUser: 33
              runAsGroup: 33
            image: {{ .image.registry -}} / {{- .image.name -}} : {{- .image.tag | toString }}
            imagePullPolicy: {{ .image.pullPolicy }}
            env:
            - name: ELOGGER_DIR
              value: /tmp/elogger
            {{- if not .db.certificate }}
            - name: ELOGGER_DBPASS
              valueFrom:
                secretKeyRef: 
                  name: {{ .db.passwordSecret | default (printf "%s.%s.credentials" .db.username .db.host) }}
                  key: {{ .db.passwordKey | default "password" }}
            {{- end }}
            - name: ELOGGER_DSN
              value: >-
                user={{ .db.username }}
                host={{ .db.host }}
                dbname={{ .db.dbname }}
                {{- if not .db.certificate }}
                password=$(ELOGGER_DBPASS)
                {{- end }}
            - name: ELOGGER_TABLE
              value: {{ .table | default ($.global.Release.Name
                | trimPrefix (print $.global.Chart.Name "-"))
                | replace "-" "_" }}
            - name: ELOGGER_INGRESS
              value: "false"
            volumeMounts:
            - mountPath: /tmp/elogger
              name: elogger
            {{- if .db.certificate }}
            - mountPath: /app/.postgresql
              name: secrets
              subPath: elogger-tls
            {{- end }}
          {{- end }}{{ end }}
          volumes:
          - name: config
            configMap:
              name: {{ .global.Release.Name }}-config
              items:
              - key: etrip.json
                path: etrip/config.json
              {{- with $b2bkey := .b2bKey }}
              - key: b2b-{{$b2bkey}}.json
                path: etrip/b2b.json
              {{- end }}
          - name: elogger
            emptyDir: {}
          {{- if $createSecretsVolume }}
          - name: secrets
            projected:
              sources:
              {{- if eq $db.provider "cnpg" }}
              - secret:
                  name: {{ .global.Release.Name }}-db-app-tls
                  items:
                  - key: tls.crt
                    path: app-tls/postgresql.crt
                  - key: tls.key
                    path: app-tls/postgresql.key
                    mode: 416
                  - key: ca.crt
                    path: app-tls/root.crt
              {{- end }}
              {{- with .global.Values.etrip.searchlogs }}
              {{- if and .enabled .certificate }}
              - secret:
                  name: {{ .certificate }}
                  items:
                  - key: tls.crt
                    path: searchlogs-tls/postgresql.crt
                  - key: tls.key
                    path: searchlogs-tls/postgresql.key
                    mode: 416
                  - key: ca.crt
                    path: searchlogs-tls/root.crt
              {{- end }}{{ end }}
              {{- with .global.Values.elogger }}
              {{- if and .enabled .db.certificate }}
              - secret:
                  name: {{ .db.certificate }}
                  items:
                  - key: tls.crt
                    path: elogger-tls/postgresql.crt
                  - key: tls.key
                    path: elogger-tls/postgresql.key
                    mode: 384
                  - key: ca.crt
                    path: elogger-tls/root.crt
              {{- end }}{{ end }}
          {{- end }}
{{- end }}
{{- range .Values.cron -}}
{{- include "etripCronjob" (dict "cron" . "global" $ ) }}
---
{{- end }}
{{- range $b2bkey, $b2bInstance := .Values.b2b -}}
{{- $b2bInstance = mergeOverwrite (deepCopy $.Values.b2b_defaults) $b2bInstance }}
{{- if not $b2bInstance.cron_disable }}
{{- range $b2bInstance.cron -}}
{{- include "etripCronjob" (dict "cron" . "global" $ "b2bKey" $b2bkey ) }}
---
{{- end }}
{{- end }}
{{- end }}
