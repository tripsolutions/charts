{{- define "etripCronjob" }}
{{- $db := mergeOverwrite .global.Values.db .global.Values.db.operator_install -}}
{{- $clusterName := include "clusterName" (dict
      "db" $db
      "Release" .global.Release
    ) -}}
kind: CronJob
apiVersion: batch/v1
metadata:
  name: {{ .global.Release.Name }}-cron-{{ .cron.name  }}
  namespace: {{ .global.Release.Namespace }}
  labels:
    {{- include "labels" .global | nindent 4 }}
spec:
  schedule: {{ .cron.schedule | quote }}
  successfulJobsHistoryLimit: {{ .cron.doneHistory | default 3 }}
  failedJobsHistoryLimit: {{ .cron.failedHistory | default 1 }}
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        cronjob-name: {{ .cron.name }}
        {{- include "selectorLabels" .global | nindent 8 }}
    spec:
      template:
        metadata:
          labels:
            cronjob-name: {{ .cron.name }}
            {{- include "selectorLabels" .global | nindent 12 }}
        spec:
          restartPolicy: Never
          containers:
          - name: job
            {{- include "etripImage" .global | nindent 12 }}
            volumeMounts:
            - mountPath: /config
              name: config
              subPath: etrip
            - mountPath: /tmp/elogger
              name: elogger
            env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef: 
                  name: etrip. {{- $clusterName -}} .credentials
                  key: password
            - name: ETRIP_CONFIG
              value: /config
            - name: ETRIP_DSN
              value: sslmode=disable user=etrip password=$(DB_PASSWORD) host=
                  {{- $clusterName }}
            {{- if gt (int .global.Values.replicas.db) 1 }}
            - name: ETRIP_DSN_RO
              value: sslmode=disable user=etrip password=$(DB_PASSWORD) host=
                {{- $clusterName }}-repl connect_timeout=1
            {{- end }}
            {{- if .global.Values.etrip.searchlogs.enabled }}
            - name: SEARCHLOGS_DBPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s.%s.credentials" .global.Values.etrip.searchlogs.username .global.Values.etrip.searchlogs.host }}
                  key: password
            - name: ETRIP_SEARCHLOGS_DSN
              value: sslmode=disable password=$(SEARCHLOGS_DBPASSWORD) user=
                {{- .global.Values.etrip.searchlogs.username }} dbname=
                {{- .global.Values.etrip.searchlogs.dbname }} host=
                {{- .global.Values.etrip.searchlogs.host }} port=
                {{- .global.Values.etrip.searchlogs.port }}
            - name: ETRIP_SEARCHLOGS_TABLE
              value: {{ .global.Values.etrip.searchlogs.table }}
            {{- end }}
            {{- if .cron.env }}
            {{- range .cron.env }}
            - name: {{ .key }}
              value: {{ .value }}
            {{- end }}
            {{- end }}
            - name: ETRIP_LOGDIR
              value: /tmp/elogger
            {{- if .global.Values.smtpgate.enabled }}
            - name: ETRIP_SMTP_HOST
              value: {{ .global.Release.Name }}-service
            {{- end }}
            {{- with .cron.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            command: 
              - /bin/sh
              - -c
              - |
                {{- .cron.command | toString | nindent 16 }}
                touch /tmp/elogger/elogger.done
          {{- if and .global.Values.elogger.enabled (not .cron.nologs ) }}
          - name: sendlogs
            {{- with .global.Values.elogger.image }}
            image: {{ .registry -}} / {{- .name -}} : 
              {{- .tag | default $.global.Values.version | default $.global.Chart.AppVersion | toString }}
            imagePullPolicy: {{ .pullPolicy }}
            {{ end -}}
            env:
            - name: ENV_CONFIG
              value: "true"
            - name: ELOGGER_DIR
              value: /tmp/elogger
            - name: ELOGGER_DBHOST
              value: {{ .global.Values.elogger.db.host }}
            - name: ELOGGER_DBNAME
              value: {{ .global.Values.elogger.db.dbname }}
            - name: ELOGGER_DBUSER
              value: {{ .global.Values.elogger.db.username }}
            - name: ELOGGER_DBPASS
              valueFrom:
                secretKeyRef: 
                  name: {{ printf "%s.%s.credentials" .global.Values.elogger.db.username .global.Values.elogger.db.host }}
                  key: password
            - name: ELOGGER_DBPORT
              value: {{ .global.Values.elogger.db.port | quote }}
            - name: ELOGGER_TABLE
              value: {{ .global.Values.elogger.db.table }}
            command:
              - sh
              - -c 
              - |
                while true; do
                  if [ -r /tmp/elogger/elogger.done ]; then
                    break
                  fi
                  sendlogs
                  sleep 60
                done
                sendlogs
            volumeMounts:
            - mountPath: /tmp/elogger
              name: elogger
          {{- end }}
          volumes:
          - name: config
            configMap:
              name: {{ .global.Release.Name }}-config
              items:
              - key: etrip.json
                path: etrip/config.json
              {{- with $b2bkey := .b2bKey }}
              - key: b2b-{{$b2bkey}}.json
                path: etrip/b2b.json
              {{- end }}
          - name: elogger
            emptyDir: {}
{{- end }}
{{- range .Values.cron -}}
{{- include "etripCronjob" (dict "cron" . "global" $ ) }}
---
{{- end }}
{{- range $b2bkey, $b2bInstance := .Values.b2b -}}
{{- $b2bInstance = mergeOverwrite (deepCopy $.Values.b2b_defaults) $b2bInstance }}
{{- if not $b2bInstance.cron_disable }}
{{- range $b2bInstance.cron -}}
{{- include "etripCronjob" (dict "cron" . "global" $ "b2bKey" $b2bkey ) }}
---
{{- end }}
{{- end }}
{{- end }}
