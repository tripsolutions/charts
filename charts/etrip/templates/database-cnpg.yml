{{- $db := mergeOverwrite .Values.db ( .Values.db.operator_install | default dict ) -}}
{{- if or (eq $db.provider "cnpg") (eq $db.bootstrap.mode "transition")  -}}
{{- if $db.generateIssuer }}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ .Release.Name }}-db-ca
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels" $ | nindent 4 }}
spec:
  isCA: true
  commonName: {{ .Release.Name }}-db
  dnsNames:
    {{- range $mode := (list "rw" "r" "ro") }}
    - {{ $.Release.Name }}-db-{{ $mode }}
    - {{ $.Release.Name }}-db-{{ $mode }}.{{ $.Release.Namespace }}
    - {{ $.Release.Name }}-db-{{ $mode }}.{{ $.Release.Namespace }}.svc
    - {{ $.Release.Name }}-db-{{ $mode }}.{{ $.Release.Namespace }}.svc.cluster.local
    {{- end }}
  issuerRef: {{ toYaml $db.caIssuer | nindent 4 }}
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: {{ .Release.Name }}-db-ca
  secretTemplate:
    labels:
      cnpg.io/reload: "true"
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: {{ .Release.Name }}-db-issuer
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels" $ | nindent 4 }}
spec:
  ca:
    secretName: {{ .Release.Name }}-db-ca
---
{{- else }}
{{- /*
  We need a server certificate generated by the caIssuer
*/}}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ .Release.Name }}-db-cert
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels" $ | nindent 4 }}
spec:
  ca: {{ toYaml $db.caIssuer | nindent 4 }}
  commonName: {{ .Release.Name }}-db
  dnsNames:
    {{- range $mode := (list "rw" "r" "ro") }}
    - {{ $.Release.Name }}-db-{{ $mode }}
    - {{ $.Release.Name }}-db-{{ $mode }}.{{ $.Release.Namespace }}
    - {{ $.Release.Name }}-db-{{ $mode }}.{{ $.Release.Namespace }}.svc
    - {{ $.Release.Name }}-db-{{ $mode }}.{{ $.Release.Namespace }}.svc.cluster.local
    {{- end }}
  issuerRef: {{ toYaml $db.caIssuer | nindent 4 }}
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: {{ .Release.Name }}-db-cert
  secretTemplate:
    labels:
      cnpg.io/reload: "true"
---
{{- end }}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ .Release.Name }}-db-replica
spec:
  commonName: streaming_replica
  {{- if $db.generateIssuer }}
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: {{ .Release.Name }}-db-issuer
  {{- else }}
  issuerRef: {{ toYaml $db.caIssuer | nindent 4 }}
  {{- end }}
  secretName: {{ .Release.Name }}-db-replica-tls
  secretTemplate:
    labels:
      cnpg.io/reload: "true"
    {{- if $db.allowCloneFrom }}
    annotations:
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: {{ $db.allowCloneFrom | quote }}
    {{- end }}
  usages:
    - client auth
---
{{- /*  
  reflect secret for cross-namespace replication
*/}}
{{- if and
    (and 
      (eq $db.bootstrap.mode "clone")
      (eq $db.bootstrap.clone.source "peer")
    )
    $db.bootstrap.clone.namespace
    }}
---
kind: Secret
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-db-clone-tls
  namespace: {{ .Release.Namespace }}
  annotations:
    reflector.v1.k8s.emberstack.com/reflects: "{{ $db.bootstrap.clone.namespace -}}
      / {{- $db.bootstrap.clone.name | default .Release.Name -}} -db-replica-tls"
{{- end }}{{/* reflected secret */}}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ .Release.Name }}-db-app
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels" $ | nindent 4 }}
spec:
  usages: [ client auth ]
  commonName: etrip
  {{- if $db.generateIssuer }}
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: {{ .Release.Name }}-db-issuer
  {{- else }}
  issuerRef: {{ toYaml $db.caIssuer | nindent 4 }}
  {{- end }}
  secretName: {{ .Release.Name }}-db-app-tls
  secretTemplate:
    labels:
      cnpg.io/reload: "true"
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ .Release.Name }}-db
  namespace: {{ .Release.Namespace }}
  {{- /* Fencing mode */}}
  {{- if and (eq $db.bootstrap.mode "transition") (eq $db.bootstrap.transitionPhase "standby_fence") }}
  annotations:
    cnpg.io/fencedInstances: '["*"]'
  {{- end }}
  labels:
    {{- include "labels" $ | nindent 4 }}
spec:
  {{- /*
    CNPG bug: while transitioning, the multitude of reconciliation errors caused
    by zalando incompatibilities before cleanup scripts get applied confuse the
    CNPG operator and cause the cluster to get stuck in an unrecoverable state
    as far as the operator can see. This is recoverable only if no other 
    instances are spawned while the first one gets cleaned up. After transition
    phase is complete (transitionPhase set to full or mode switched away from 
    "transition") we can allow more than one instance to be spawned. */}}
  {{- if and (eq $db.bootstrap.mode "transition") $db.bootstrap.transitionPhase }}
  instances: 1
  {{- else }}
  instances: {{ .Values.replicas.db }}
  {{- end }}
  imageName: {{ $db.image.registry -}} 
            / {{- $db.image.name -}} 
            : {{- $db.image.tag }}
  {{- if $db.image.pullPolicy }}
  imagePullPolicy: {{ $db.image.pullPolicy }}
  {{- end }}
  storage: {{ toYaml $db.dbVolume | nindent 4 }}
  certificates:
    {{- if $db.generateIssuer }}
    serverCASecret: {{ .Release.Name }}-db-ca
    serverTLSSecret: {{ .Release.Name }}-db-ca
    clientCASecret: {{ .Release.Name }}-db-ca
    {{- else }}
    serverCASecret: {{ .Release.Name }}-db-cert
    serverTLSSecret: {{ .Release.Name }}-db-cert
    clientCASecret: {{ .Release.Name }}-db-cert
    {{- end }}
    replicationTLSSecret: {{ .Release.Name }}-db-replica-tls
  postgresql:
    pg_hba:
    - hostssl etrip all all cert
    parameters: {{ toYaml $db.dbParameters | nindent 6}}
    shared_preload_libraries:
    - pg_cron
  {{- with $db.resources }}
  resources: {{ toYaml . | nindent 4 }}
  {{- end }}
  {{- 
    $templateStr := tpl $db.template (
      dict "Release" .Release "Values" .Values "Chart" .Chart "db" $db
          "Template" .Template
    )
  }}
  {{- $templateDict := fromYaml $templateStr -}}
  {{- $templateDict = mergeOverwrite $templateDict 
        ($db.overrides | default dict) -}}
  {{ $templateDict | toYaml | nindent 2 }}
  {{- with $db.affinity }}
  affinity: {{ toYaml . | nindent 4 }}
  {{- end }}
  monitoring:
    enablePodMonitor: {{ $db.exporter.enabled }}
{{- with $db.backup }}
{{- if and .s3.enabled .schedule }}
---
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: {{ $.Release.Name }}-db-scheduled-backup
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "labels" $ | nindent 4 }}
spec:
  cluster:
    name: {{ $.Release.Name }}-db
  schedule: {{ .schedule | quote }}
  backupOwnerReference: self
{{- end }}{{ end }}{{/* s3 enabled, schedule, backup */}}
{{- if $db.exporter.enabled }}
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: {{ .Release.Name }}-db
spec:
  selector:
    matchLabels:
      "cnpg.io/cluster": {{ .Release.Name }}
  podMetricsEndpoints:
  - port: metrics
{{- end }}
{{- end }}
{{/*  XXX: how to overcome refusal to backup to a non-empty bucket?
      tested standby from backup
      tested clone across namespaces
      TODO: investigate metrics
      stakater/reloader not needed, on cert rotation new certs are automatically
      updated in the mounted secrets inside pods
      TODO: investigate KeyDB alternative to Redis
 */ -}}